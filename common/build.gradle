import org.jetbrains.kotlin.gradle.dsl.JvmTarget

//file:noinspection GroovyAssignabilityCheck
dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"

    modApi "com.github.Ultreon.ultreonlib:ultreon-lib:$ultreonlib_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.4.1"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.4.1"

    modCompileOnly "curse.maven:forgeapiportfabric-547434:3671141"
    modCompileOnly 'com.electronwill.night-config:core:3.6.3'
    modCompileOnly 'com.electronwill.night-config:toml:3.6.3'
}

architectury {
    common("fabric", "forge")
}

loom {
    accessWidenerPath = file("$projectDir/src/main/resources/template.accesswidener")
}

kotlin {
    jvmToolchain 17
}

compileKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_17
    }
}

classes {
    finalizedBy("copyKotlinClasses")
}

tasks.register("copyKotlinClasses") {
    doLast {
        copy {
            from fileTree("$projectDir/build/classes/kotlin/main")
            into file("$projectDir/build/classes/java/main")
        }
    }
}

jar.mustRunAfter("copyKotlinClasses")

jar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

compileKotlin {
    outputs.dir("$projectDir/build/classes/java/main")
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}